@page "/pokemon-list"
@inject HttpClient Http
@using tcg_webApp.Domain

<MudContainer>
    <MudCard Style="margin-top: 20px; margin-bottom: 20px;" Outlined="true">
        <MudCardContent>
            <MudGrid>
                <!-- Campo de texto -->
                <MudItem xs="12" sm="10" md="8" lg="9">
                    <MudTextField @bind-Value="parameters.Name"
                    Label="Nome da carta"
                    Variant="Variant.Outlined"
                    FullWidth="true">
                    </MudTextField>
                </MudItem>

                <!-- Botão de pesquisa -->
                <MudItem xs="12" sm="2" md="4" lg="3" Style="display: flex; justify-content: flex-end; align-items: center;">
                    <MudIconButton OnClick="@Search"
                    Icon="@Icons.Material.Outlined.Search"
                    Color="Color.Primary"
                    aria-label="pesquisa">
                    </MudIconButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
    <MudGrid>
        @if (pokemons == null)
        {
            <!-- Exibe o Skeleton enquanto os dados estão carregando -->
            @for (int i = 0; i < 8; i++)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudSkeleton variant="circle" width="40px" height="40px" />
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudSkeleton width="60%" height="20px" />
                                <MudSkeleton width="40%" height="16px" />
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardMedia>
                            <MudSkeleton height="250px" />
                        </MudCardMedia>
                        <MudCardContent>
                            <MudSkeleton width="80%" height="16px" />
                            <MudSkeleton width="60%" height="16px" />
                            <MudSkeleton width="70%" height="16px" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudSkeleton width="40px" height="40px" variant="circle" />
                            <MudSkeleton width="40px" height="40px" variant="circle" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            @foreach (var pokemon in pokemons)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <PokemonCard Pokemon="pokemon" />
                </MudItem>
            }
        }
    </MudGrid>
    <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center" Style="margin-top: 20px; margin-bottom: 20px;">
        <MudItem>
            <MudPagination SelectedChanged="PageChanged" Color="Color.Primary" Count="5" />
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    #region Global Variables
    private List<Pokemon> pokemons;
    public string TextValue { get; set; }
    public Filter parameters = new Filter();
    private int _selected = 1;
    #endregion

    #region InternalClasses
    public class Filter
    {
        public string Name { get; set; }
    }
    #endregion

    #region Methods
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<Pokemon>>($"http://localhost:5098/api/Pokemon/list?take=20&skip=1");
            pokemons = response;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar Pokémon: {ex.Message}");
        }
    }

    async void Search()
    {

        try
        {
            var response = 
                await Http.GetFromJsonAsync<List<Pokemon>>(
                    $"http://localhost:5098/api/Pokemon/namelist?name={parameters.Name}&take=20&skip=1"
                );

            pokemons = response;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar Pokémon: {ex.Message}");
        }
    }

    void PageChanged()
    {
        return; //TODO: Corrigir paginacao
        try
        {
            if(string.IsNullOrEmpty(parameters.Name))
            {
                var response = 
                     Http.GetFromJsonAsync<List<Pokemon>>(
                        $"http://localhost:5098/api/Pokemon/list?take=20&skip={(_selected == 1 ? (1) : (_selected - 1) * 20)}"
                    )
                    .GetAwaiter()
                    .GetResult();
                pokemons = response;
            }
            else
            {

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao mudar pagina da lista Pokémon: {ex.Message}");
        }
    }

    #endregion
}
